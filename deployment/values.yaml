# Default values for Helm-based deployment.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

applicationDomain: c03.k8s-popup.csc.fi  # change to wes server
clusterType: openshift  # either 'kubernetes' or 'openshift'
tlsSecret: mytls-secret  # put name of tlsSecret
storageAccessMode: ReadWriteOnce  # mongodb-pvc.yaml/rabbitmq-pvc.yaml, change to ReadWriteMany if storageClass can do RWX

autocert:
  createJob: "true"  # actually create autocert cronjob, for K8S with autocert installed set to "false"
  schedule: "0 0 1 */2 *"  # cronjob schedule
  testCert: "true"  # use test certificates so as not to exceed quota
  image: elixircloud/autocert:devel
  apiServer: kubernetes.default.svc:443  # address of k8s API server
  email: cert.author@cert.author.host.org  # email to inject into certificate

flower:
  appName: flower
  basicAuth: admin:admin
  image: endocode/flower

wes:
  appName: cwlwes
  image: elixircloud/cwl-wes:latest
  netrcMachine: defaultmachine  # change this
  netrcLogin: defaultnetrclogin  # change this
  netrcPassword: defaultnetrcpassword  # change this
  storageClass: nfs-client  # <- wes-volume.yaml, only for K8S, a storageClass with readWriteMany capability is required
  volumeSize: 1Gi

celeryWorker:
  appName: celery-worker
  image: elixircloud/cwl-wes:latest

mongodb:
  appName: mongodb
  databaseAdminPassword: adminpasswd
  databaseName: cwlwes-db
  databasePassword: cwlwes-db-passwd
  databaseUser: cwlwes-user
  volumeSize: 1Gi
  image: centos/mongodb-36-centos7
  mountPath: /var/lib/mongodb/data
  pullPolicy: Always
  securityContext:  # only for K8S
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
    runAsNonRoot: true

rabbitmq:
  appName: rabbitmq
  volumeSize: 1Gi
  image: rabbitmq:3-management

ingress: # <- wes-ingress-kubernetes.yaml, only for system ingress for K8S, ensure wes namespace has rights to access it
  letsencryptSystem: "true"  # if true, ensure wes namespace has rights to access letsencrypt pods - rbac
  nginx_image: nginx/nginx-ingress:1.3.0
  tls_letsencrypt:
    annotations:
      ingressclass: "nginx"
      tlsacme: "\"true\""
      clusterissuer: "letsencrypt-prod"


